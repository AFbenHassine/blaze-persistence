== Getting started

This is a step-by-step introduction about how to get started with {projectname} the core.

=== Setup

TODO: Describe what the dependencies are, maybe give a subsection about Maven.
TODO: Mention core-integration-cdi for Java EE environment.

=== Environments [[Environments]]

{projectname} is usable in Java EE as well as in Java SE environments.

==== Java SE

An instance of `CriteriaBuilderFactory` can be obtained as follows:

[source,java]
----
CriteriaBuilderConfiguration config = Criteria.getDefault();
// optionally, perform dynamic configuration
CriteriaBuilderFactory cbf = config.createCriteriaBuilderFactory();
----

The `Criteria.getDefault()` method uses the `java.util.ServiceLoader` to locate
the first implementation of `CriteriaBuilderConfigurationProvider` on the classpath
which it uses to obtain an instance of `CriteriaBuilderConfiguration`.
The `CriteriaBuilderConfiguration` instance also allows dynamic configuration of the
factory.

NOTE: The `CriteriaBuilderFactory` should only be built once.

==== Java EE

For usage with CDI blaze-persistence-integration-core-cdi provides a CDI
extension which allows the injection of the `CriteriaBuilderFactory` into your
application's CDI beans like following example shows.

[source,java]
----
public class KittenDataAccess {
    @Inject
    private CriteriaBuilderFactory cbf;
}
----

=== First criteria query

This section is supposed to give you a first feeling of how to use the criteria
builder. For more detailed information, please see the subsequent chapters.

NOTE: In the following we suppose `cbf` and `em` to refer to an instance of `CriteriaBuilderFactory`
and JPA's `EntityManager`, respectively.
See <<Environments>> for how to obtain a `CriteriaBuilderFactory`.

Let's start with the simplest query possible:
[source,java]
----
CriteriaBuilder<Cat> cb = cbf.create(em, Cat.class);
----
This query simply selects all Cat objects and is equivalent to following JPQL query:
[source,sql]
----
SELECT c FROM Cat c
----
Once the `create()` method is called the expression returns a `CriteriaBuilder<T>` where
`T` is specified via the second parameter of the `create()` method and denotes the
result type of the query. The default behavior of `create()` is that the result type
is assumed to be the entity class from which to select.
So if we would like to only select the cats' age we would have to write:
[source,java]
----
CriteriaBuilder<Integer> cb = cbf.create(em, Integer.class)
 .from(Cat.class)
 .select("cat.age");
----

Here we can see that the criteria builder assigns a default alias (the simple lower-case name of the entity class)
to the entity class from which we select (root entity) if we do not specify one. If we want to save some
writing, both the `create()` and the `from()` method allow the specification of a custom alias
for the root entity:
[source,java]
----
CriteriaBuilder<Integer> cb = cbf.create(em, Integer.class)
 .from(Cat.class, "c")
 .select("c.age");
----

Next we want to build a more complicated query. Let's select all cats with an
age between 5 and 10 years and with at least two kittens. Additionally, we would
like to order the results by name ascending.
[source,java]
----
CriteriaBuilder<Cat> cb = cbf.create(em, Cat.class, "c")
 .where("c.age").betweenExpression("5").andExpression("10")
 .where("SIZE(c.kittens)").geExpression("2")
 .orderByAsc("c.name");
----

We have built a couple of queries so far but how can we retrieve the results?
There are two possible ways:

* `List<Cat> cats = cb.getResultList();` to retrieve all results
* `PagedList<Cat> cats = cb.page(0, 10).getResultList();` to retrieve 10 results starting from the first result
(the default ordering is by `@Id`)
+
The `PagedList<Cat>` features the `totalSize()` method which is perfectly suited for displaying the results in a
paginated table. Moreover the `getKeySet()` method can be used to switch to keyset pagination for further paging.

=== Summary

If you want to go into more detail, you are now ready to discover the other chapters of the documentation or
the API yourself.